@startuml
actor Socio as socio

participant Controlador
participant Servicio
participant ConversorImagen
participant Dao
database BD

socio -> Controlador: Presenta credencial / rostro
Controlador -> Servicio: registrarSalida(idSocio / imagen)

alt Identificación por imagen
    Servicio -> ConversorImagen: convertirImagen(imagen)
    ConversorImagen --> Servicio: vectorFacial
end

Servicio -> Dao: buscarSocio(idSocio / vectorFacial)
Dao -> BD: SELECT socio
BD --> Dao: datosSocio (o vacío)
Dao --> Servicio: socioValido / socioInvalido

alt Socio válido y activo
    Servicio -> Dao: buscarRegistroEntradaAbierto(idSocio)
    Dao -> BD: SELECT registroEntrada WHERE salida IS NULL
    BD --> Dao: registroEncontrado / vacío
    Dao --> Servicio: registroEntrada

    alt Registro abierto encontrado
        Servicio -> Dao: actualizarRegistroSalida(idSocio, horaSalida)
        Dao -> BD: UPDATE registroEntrada SET salida = horaSalida
        BD --> Dao: ok
        Dao --> Servicio: registroActualizado
        Servicio --> Controlador: confirmaciónSalida
        Controlador --> socio: "Salida registrada con éxito"
    else No existe registro abierto
        Servicio --> Controlador: error("No hay entrada previa")
        Controlador --> socio: "Acceso denegado: no hay entrada registrada"
    end

else Socio inválido o inactivo
    Servicio --> Controlador: error("Socio no válido")
    Controlador --> socio: "Acceso denegado"
end

@enduml

